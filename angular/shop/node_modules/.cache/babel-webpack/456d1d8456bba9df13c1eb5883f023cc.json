{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/luuuk/Desktop/angular/shop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { take } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../auth/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n\n  canActivate() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let res;\n\n      _this.authService.canAdd().subscribe(e => {\n        res = () => {\n          return new Promise((resolve, reject) => {\n            if (!e[\"userCan\"]) {\n              _this.router.navigate([\"\"]);\n\n              return reject(false);\n            } else {\n              return resolve(true);\n            }\n\n            ;\n          });\n        };\n      });\n\n      yield res();\n      console.log(res);\n      take(1);\n      return res;\n    })();\n  }\n\n}\n\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\n\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac\n});","map":{"version":3,"sources":["C:\\Users\\luuuk\\Desktop\\angular\\shop\\src\\app\\main\\add-product\\guard\\auth-guard.ts"],"names":[],"mappings":";AAEA,SAAS,IAAT,QAAqB,gBAArB;;;;AAIA,OAAM,MAAO,SAAP,CAAgB;AAElB,EAAA,WAAA,CACY,WADZ,EAEY,MAFZ,EAE0B;AADd,SAAA,WAAA,GAAA,WAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACL;;AAED,EAAA,WAAW,GAAA;AAAA;;AAAA;AAEb,UAAI,GAAJ;;AACA,MAAA,KAAI,CAAC,WAAL,CAAiB,MAAjB,GAA0B,SAA1B,CAAoC,CAAC,IAAG;AACpC,QAAA,GAAG,GAAG,MAAK;AAEP,iBAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACvC,gBAAG,CAAC,CAAC,CAAC,SAAD,CAAL,EACA;AACI,cAAA,KAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,CAAC,EAAD,CAArB;;AACA,qBAAO,MAAM,CAAC,KAAD,CAAb;AACH,aAJD,MAMA;AACI,qBAAO,OAAO,CAAC,IAAD,CAAd;AACH;;AAAA;AACA,WAVM,CAAP;AAWH,SAbD;AAcH,OAfD;;AAiBA,YAAM,GAAG,EAAT;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,GAAZ;AACA,MAAA,IAAI,CAAC,CAAD,CAAJ;AACA,aAAO,GAAP;AAvBa;AAwBhB;;AA/BiB;;;mBAAT,S,EAAS,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,WAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,MAAA,C;AAAA,C;;;SAAT,S;AAAS,EAAA,OAAA,EAAT,SAAS,CAAA","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { CanActivate, Router } from \"@angular/router\";\r\nimport { take } from \"rxjs/operators\";\r\nimport { AuthService } from \"../../auth/auth.service\";\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate\r\n{\r\n    constructor(\r\n        private authService: AuthService,\r\n        private router: Router\r\n        ){}\r\n\r\n    async canActivate(): Promise<boolean>\r\n    {\r\n        let res;\r\n        this.authService.canAdd().subscribe(e => {\r\n            res = () => \r\n            { \r\n                return new Promise((resolve, reject) => {\r\n                if(!e[\"userCan\"])\r\n                {\r\n                    this.router.navigate([\"\"]);\r\n                    return reject(false);\r\n                }\r\n                else\r\n                { \r\n                    return resolve(true);\r\n                };\r\n                })\r\n            }\r\n        });\r\n\r\n        await res();\r\n        console.log(res);\r\n        take(1);\r\n        return res;\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}