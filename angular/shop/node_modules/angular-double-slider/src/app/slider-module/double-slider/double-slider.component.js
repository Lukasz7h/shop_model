import { Component, ChangeDetectorRef, HostListener, ViewChild, EventEmitter, ElementRef, Input, Output } from '@angular/core';
var DoubleSliderComponent = /** @class */ (function () {
    function DoubleSliderComponent(cdr) {
        this.cdr = cdr;
        this.tooltip = false;
        this.tooltipSymbol = "";
        this.increment = 0;
        this.disable = false;
        this.minChange = new EventEmitter();
        this.maxChange = new EventEmitter();
        this.sliderEnd = new EventEmitter();
        this.sliderMiddle = true;
        this.sliderMinIcon = "";
        this.mouseDownHandle = false;
        this.total = 0;
    }
    DoubleSliderComponent.prototype.ngOnInit = function () {
        this.minValue = +this.minValue;
        this.maxValue = +this.maxValue;
    };
    DoubleSliderComponent.prototype.resetPosition = function () {
        try {
            var pos = -(this.halfSliderWidth);
            this.sliderChange("min", pos, this.minValue);
            pos = (this.halfSliderWidth);
            this.sliderChange("max", pos, this.maxValue);
            this.minPos = 0;
            this.maxPos = this.width;
            this.last = 0;
            this.progressFn(this.progress.nativeElement, this.minPos);
            this.sliderEnd.emit({ "min": this.minValue, "max": this.maxValue });
        }
        catch (e) {
        }
    };
    DoubleSliderComponent.prototype.onmousedown = function (e) {
        try {
            if (!this.disable) {
                e.preventDefault();
                this.element = e.target;
                this.mouseDownHandle = true;
                e.stopPropagation();
            }
        }
        catch (e) {
        }
    };
    DoubleSliderComponent.prototype.onResize = function (e) {
        try {
            this.width = this.dbSlider.nativeElement.clientWidth;
            this.maxPos = +(((this.maxPos) / this.lastWidth) * this.width);
            this.minPos = +((this.minPos / this.lastWidth) * this.width);
            this.lastWidth = this.width;
            this.parentHandler(this.minPos, "min");
            this.parentHandler(this.maxPos, "max");
            this.last = this.minPos;
            if (this.checkGreater()) {
                this.progressFn(this.progress.nativeElement, this.minPos);
            }
        }
        catch (e) {
        }
    };
    DoubleSliderComponent.prototype.sliderChange = function (ele, pos, value) {
        try {
            if (ele === "min") {
                this.slideMin.nativeElement.style.webkitTransform = "translate(" + pos + "px,0px)";
                this.minChange.emit(value);
                this.minTooltip = value;
            }
            else {
                this.slideMax.nativeElement.style.webkitTransform = "translate(" + pos + "px,0px)";
                this.maxChange.emit(value);
                this.maxTooltip = value;
            }
        }
        catch (e) { }
    };
    DoubleSliderComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        try {
            setTimeout(function () {
                _this.sliderWidth = _this.slideMax.nativeElement.clientWidth;
                _this.halfSliderWidth = _this.sliderWidth / 2;
                _this.width = _this.dbSlider.nativeElement.clientWidth;
                _this.lastWidth = _this.width;
                _this.initalPosition = _this.dbSlider.nativeElement.offsetParent.offsetLeft + _this.dbSlider.nativeElement.offsetLeft;
                _this.minPos = 0;
                _this.maxPos = _this.width;
                _this.total = _this.maxValue - _this.minValue;
                _this.min = _this.minValue | 0;
                _this.max = _this.total > 0 ? _this.maxValue : _this.width;
                _this.minTooltip = _this.min;
                _this.maxTooltip = _this.max;
                _this.resetPosition();
                _this.last = 0;
            });
        }
        catch (e) {
        }
    };
    DoubleSliderComponent.prototype.getPosition = function (e) {
        try {
            var touch = e.type.indexOf('touch') === 0;
            var clientX = touch ? e.touches[0].clientX : e.clientX;
            return clientX;
        }
        catch (e) {
        }
    };
    DoubleSliderComponent.prototype.parentHandler = function (e, checkS) {
        try {
            if (!this.disable) {
                var totalPos = 0;
                if (!checkS) {
                    var pos = this.getPosition(e);
                    totalPos = pos - (this.dbSlider.nativeElement.offsetParent.offsetLeft + this.dbSlider.nativeElement.offsetLeft);
                }
                else {
                    totalPos = Math.floor(e);
                }
                var value = this.evaluateValue(totalPos);
                if ((((totalPos <= this.width / 2) && this.max >= value) || value <= this.min) || checkS === "min") {
                    this.minPos = totalPos;
                    this.min = value;
                    this.element = this.slideMin.nativeElement;
                    var pos = totalPos - this.halfSliderWidth;
                    this.sliderChange("min", pos, value);
                }
                else {
                    this.maxPos = totalPos;
                    this.max = value;
                    this.element = this.slideMax.nativeElement;
                    var pos = -(this.width - totalPos - this.halfSliderWidth);
                    this.sliderChange("max", pos, value);
                }
                this.getSliderValue();
                if (this.checkGreater() && !checkS) {
                    this.progressFn(this.progress.nativeElement, this.minPos);
                    this.sliderEnd.emit({ "min": this.min, "max": this.max });
                }
            }
        }
        catch (e) {
        }
    };
    DoubleSliderComponent.prototype.parent = function (e) {
        try {
            e.preventDefault();
            this.parentHandler(e, false);
        }
        catch (e) {
        }
    };
    DoubleSliderComponent.prototype.checkGreater = function () {
        try {
            return this.max >= this.min;
        }
        catch (e) {
        }
    };
    DoubleSliderComponent.prototype.onMove = function (e) {
        try {
            if (this.mouseDownHandle && !this.disable) {
                e.preventDefault();
                var check = this.getPosition(e) - (this.dbSlider.nativeElement.offsetParent.offsetLeft + this.dbSlider.nativeElement.offsetLeft);
                if ((check <= this.width + 4) && (check - 2 >= 0)) {
                    this.getSliderValue();
                    var value = 0;
                    if (this.getSlider === "min") {
                        this.minPos = check;
                        this.min = value = this.evaluateValue(check);
                        if (this.checkGreater()) {
                            var pos = this.minPos - this.halfSliderWidth;
                            this.sliderChange("min", pos, value);
                        }
                    }
                    else {
                        this.maxPos = check;
                        this.max = value = this.evaluateValue(this.maxPos);
                        if (this.checkGreater()) {
                            var pos = -(this.width - check - this.halfSliderWidth);
                            this.sliderChange("max", pos, value);
                        }
                    }
                    if (this.checkGreater()) {
                        this.progressFn(this.progress.nativeElement, this.minPos);
                    }
                }
            }
        }
        catch (e) {
        }
    };
    DoubleSliderComponent.prototype.mouseup = function (e) {
        // e.preventDefault();
        try {
            if (this.mouseDownHandle)
                this.sliderEnd.emit({ "min": this.minTooltip, "max": this.maxTooltip });
            this.mouseDownHandle = false;
        }
        catch (e) { }
    };
    DoubleSliderComponent.prototype.progressFn = function (progress, pos) {
        // if (this.sliderMiddle) {
        try {
            var check = (pos !== false ? (this.maxPos - this.minPos) / this.width : 1);
            if (this.getSlider === "min") {
                this.last = pos;
                progress.style.webkitTransform = "translate(" + pos + "px,0) scale(" + check + ",1)";
            }
            else {
                progress.style.webkitTransform = "translate(" + this.last + "px,0) scale(" + check + ",1)";
            }
        }
        catch (e) {
        }
    };
    DoubleSliderComponent.prototype.evaluateValue = function (vals) {
        try {
            var increment = this.increment ? (this.total / this.increment) : 100;
            var val = Math.floor((vals / this.width) * increment);
            var value = (this.total / increment) * val;
            return value + this.minValue;
        }
        catch (e) {
        }
    };
    DoubleSliderComponent.prototype.decodeValue = function (element, val) {
        try {
            val = val - this.minValue;
            var val1 = this.width / (this.total / val);
            return val1;
        }
        catch (e) { }
    };
    DoubleSliderComponent.prototype.getSliderValue = function () {
        try {
            if (this.element.classList.contains("slider-min")) {
                this.getSlider = "min";
            }
            else if (this.element.classList.contains("slider-max")) {
                this.getSlider = "max";
            }
        }
        catch (e) { }
    };
    DoubleSliderComponent.prototype.reset = function () {
        try {
            this.resetPosition();
        }
        catch (e) { }
    };
    DoubleSliderComponent.prototype.setMax = function (val) {
        try {
            val = parseInt(val);
            if (val <= this.maxValue && val >= this.min && !this.disable) {
                this.getSlider = "max";
                var element = this.slideMax.nativeElement;
                var pos = -(this.width - this.decodeValue(element, val) - this.halfSliderWidth);
                this.sliderChange("max", pos, val);
                this.max = val;
                this.maxPos = this.width + pos;
                this.progressFn(this.progress.nativeElement, this.minPos);
            }
        }
        catch (e) {
        }
    };
    DoubleSliderComponent.prototype.setMin = function (val) {
        try {
            val = parseInt(val);
            if (val >= this.minValue && val <= this.max && !this.disable) {
                this.getSlider = "min";
                var element = this.slideMin.nativeElement;
                var pos = this.decodeValue(element, val) - this.halfSliderWidth;
                this.sliderChange("min", pos, val);
                this.minPos = pos;
                this.min = val;
                this.progressFn(this.progress.nativeElement, this.minPos);
            }
        }
        catch (e) { }
    };
    DoubleSliderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'double-slider',
                    template: "<div class=\"p-slider\">\n  <div [ngClass]=\"{'disable':disable}\" #dbSlider1 class=\"double-slider\" (window:resize)=\"onResize($event)\" (mousedown)=\"parent($event)\"\n      (touchstart)=\"parent($event)\">\n      <div class=\"slider slider-min\" #slideMin (touchstart)=\"onmousedown($event)\" (mousedown)=\"onmousedown($event)\">\n          <span class=\"tooltip\" *ngIf=\"tooltip\">\n              <i class=\"{{tooltipSymbol}}\"></i>&nbsp;{{minTooltip}}</span>\n      </div>\n      <div class=\"slider slider-max\" #slideMax (touchstart)=\"onmousedown($event)\" (mousedown)=\"onmousedown($event)\">\n          <span class=\"tooltip\" *ngIf=\"tooltip\">\n              <i class=\"{{tooltipSymbol}}\"></i>&nbsp;{{maxTooltip}}</span>\n      </div>\n      <div [hidden]=\"!sliderMiddle\" class=\"slider-progress\" #sliderProgress></div>\n  </div>\n</div>",
                    styles: ["\n*{\n    box-sizing: border-box;\n}\n.double-slider{\n  background-color:white;\n    border:1px solid #DDDDDD;\n    /* height: 10px; */\n    height: 12px;\n    /* width:100%; */\n    position: relative;\n    border-radius: 2px;\n    max-width: 600px;\n    margin:10px;\n    cursor: pointer;\n}\n.disable{\n    cursor: no-drop ;\n    opacity: 0.6;\n}\n.slider{\n    /* background-image: url(\"pepsi.png\"); */\n    box-shadow: 0 2px 2px rgba(0, 0, 0, 0.24), 0 0 2px rgba(0, 0, 0, 0.12);\n   /* opacity: 0.4; */\n    top: -12px;\n    z-index: 3;\n    width: 32px;\n    height: 32px;\n    cursor: inherit;\n    background-color: #0db9f0;\n    position: absolute;\ndisplay: inline-block;\nwhite-space: nowrap;\nborder-radius: 16px;\ntransform-origin: 0 0;\nwill-change: transform;\n}\n.slider2{\n\n    /* opacity: 0.4; */\n     top: -12px;\n     z-index: 3;\n     width: 32px;\n     height: 32px;\n     cursor: pointer;\n     background-color: #0db9f0;\n     position: absolute;\n display: inline-block;\n white-space: nowrap;\n border-radius: 2px;\n transform-origin: 0 0;\n will-change: transform;\n }\n.slider2::before{\n    content: \"\";\n    display: block;\n    position: absolute;\n    height: 14px;\n    width: 1px;\n    background: #E8E7E6;\n    left: 14px;\n    top: 6px;\n}\n.slider2::after{\n    content: \"\";\n    display: block;\n    position: absolute;\n    height: 14px;\n    width: 1px;\n    background: #E8E7E6;\n    left: 14px;\n    top: 6px;\n}\n.slider2:nth-child(1){\n    z-index:4;\n    left:0px;\n    }\n.slider2:nth-child(2){\n    z-index:5;\n/* right:-16px; */\nright: 0px;\n}\n.slider:nth-child(1){\n    left:0px;\n    }\n.slider:nth-child(2){\n/* right:-16px; */\nright: 0px;\n}\n\n.slider-progress{\n    position: absolute;\n    top:0px;\n    /* width:calc(100% - 32px); */\n   width:100%;\nheight: 100%;\n    /* left:15px; */\nleft: 0px;\n    /* height:10px; */\n    height: inherit;\n    background-color: #e5e5e5;  \n    transform-origin: 0 0;\n    will-change: transform;\n}\n.slider-disable{\n    opacity: .35 !important;\n    cursor: not-allowed !important;\n}\n.tooltip{\n    position: absolute;\n    top: -28px;\n    left: -3px;\n    z-index: 100;\n    background-color: white;\n    border: 1px solid dotted black;\n    border-style: dotted;\n    border: 2px solid lightseagreen;\n    border-radius: 5px;\n    padding: 2px;\n    text-align: center;\n    box-shadow: 0 2px 2px rgba(0, 0, 0, 0.24), 0 0 2px rgba(0, 0, 0, 0.12);    \n}\n\n.slider:active{\n    box-shadow: 0 2px 2px rgba(0, 0, 0, 0.24), 0 0 2px rgba(0, 0, 0, 0.12);\n}\n.slider2 .tooltip{\n    top:-17px;\n    left:-5px;\n}\n.p-slider{\n    display: inline-block;\n    position: relative;\n    box-sizing: border-box;\n    padding: 8px;\n    outline: 0;\n    vertical-align: middle;\n    height: 48px;\n    min-width: 128px;\n    width: 300px;\n}"]
                },] },
    ];
    /** @nocollapse */
    DoubleSliderComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef, },
    ]; };
    DoubleSliderComponent.propDecorators = {
        "tooltip": [{ type: Input, args: ["tooltip",] },],
        "tooltipSymbol": [{ type: Input, args: ["tooltipSymbol",] },],
        "minValue": [{ type: Input, args: ["min",] },],
        "maxValue": [{ type: Input, args: ["max",] },],
        "increment": [{ type: Input, args: ["increment",] },],
        "disable": [{ type: Input, args: ["disable",] },],
        "minChange": [{ type: Output, args: ["minChange",] },],
        "maxChange": [{ type: Output, args: ["maxChange",] },],
        "sliderEnd": [{ type: Output, args: ["sliderEnd",] },],
        "dbSlider": [{ type: ViewChild, args: ["dbSlider1",] },],
        "slideMin": [{ type: ViewChild, args: ["slideMin",] },],
        "slideMax": [{ type: ViewChild, args: ["slideMax",] },],
        "progress": [{ type: ViewChild, args: ["sliderProgress",] },],
        "sliderMiddle": [{ type: Input, args: ["sliderMiddle",] },],
        "sliderMinIcon": [{ type: Input, args: ["sliderMinIcon",] },],
        "onMove": [{ type: HostListener, args: ['document:mousemove', ['$event'],] }, { type: HostListener, args: ['document:touchmove', ['$event'],] },],
        "mouseup": [{ type: HostListener, args: ['document:mouseup', ['$event'],] }, { type: HostListener, args: ['document:touchend', ['$event'],] },],
    };
    return DoubleSliderComponent;
}());
export { DoubleSliderComponent };
//# sourceMappingURL=double-slider.component.js.map